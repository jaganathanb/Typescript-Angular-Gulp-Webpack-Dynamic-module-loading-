{"version":3,"sources":["app.base64Service.ts"],"names":["Base64","Base64.constructor","Base64.encode","Base64.decode"],"mappings":"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","file":"app.base64Service.js","sourcesContent":["class Base64 {\r\n    private _keyString: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n\r\n    constructor() {\r\n    }\r\n\r\n    encode(input: string): any {\r\n        var output: string = \"\",\r\n            chr1, chr2, chr3 = 0,\r\n            enc1, enc2, enc3, enc4 = 0,\r\n            i = 0;\r\n\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n\r\n            output = output +\r\n            this._keyString.charAt(enc1) +\r\n            this._keyString.charAt(enc2) +\r\n            this._keyString.charAt(enc3) +\r\n            this._keyString.charAt(enc4);\r\n            chr1 = chr2 = chr3 = 0;\r\n            enc1 = enc2 = enc3 = enc4 = 0;\r\n        } while (i < input.length);\r\n\r\n        return output;\r\n    }\r\n\r\n    decode(input): string {\r\n        var output = \"\";\r\n        var chr1, chr2, chr3 = 0;\r\n        var enc1, enc2, enc3, enc4 = 0;\r\n        var i = 0;\r\n\r\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\r\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\r\n        if (base64test.exec(input)) {\r\n            console.error(\"Invalid characters in the input.\\n\" +\r\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\\n\" +\r\n                \"Expect errors in decoding.\");\r\n        }\r\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n\r\n        do {\r\n            enc1 = this._keyString.indexOf(input.charAt(i++));\r\n            enc2 = this._keyString.indexOf(input.charAt(i++));\r\n            enc3 = this._keyString.indexOf(input.charAt(i++));\r\n            enc4 = this._keyString.indexOf(input.charAt(i++));\r\n\r\n            chr1 = (enc1 << 2) | (enc2 >> 4);\r\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n            chr3 = ((enc3 & 3) << 6) | enc4;\r\n\r\n            output = output + String.fromCharCode(chr1);\r\n\r\n            if (enc3 != 64) {\r\n                output = output + String.fromCharCode(chr2);\r\n            }\r\n            if (enc4 != 64) {\r\n                output = output + String.fromCharCode(chr3);\r\n            }\r\n\r\n            chr1 = chr2 = chr3 = 0;\r\n            enc1 = enc2 = enc3 = enc4 = 0;\r\n\r\n        } while (i < input.length);\r\n\r\n        return output;\r\n    }\r\n}\r\n\r\nexport = Base64;"],"sourceRoot":"/source/"}